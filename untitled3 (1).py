# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lQwyPTN2DvloBivs7GG6eEc2-nm525cx
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from xgboost import XGBClassifier
from sklearn.pipeline import Pipeline
from sklearn import metrics

df_train_set=pd.read_csv('https://raw.githubusercontent.com/JamshidSalimov/Ai-Fayls/master/train_dataset.csv')
df_train_set

df_train_set.shape

df_train_set.info()

df_test_set=pd.read_csv('https://raw.githubusercontent.com/JamshidSalimov/Ai-Fayls/master/test_dataset.csv')
df_test_set

df_test_set.shape

df_test_set.info()

df_result=pd.read_csv('https://raw.githubusercontent.com/JamshidSalimov/Ai-Fayls/master/sample_submission.csv')
df_result

df_result.shape

df_train_set.isnull().sum()

df_train_set['satisfaction'].value_counts()

s = df_train_set['satisfaction'].value_counts()
plt.figure(figsize=(5,5))
plt.pie(s, labels=['Qoniqish','Norozilik'])
plt.show()

fig, axes = plt.subplots(1,3, figsize=(15,5))

sns.countplot(x='Gender', hue='satisfaction', palette='viridis', data=df_train_set, ax=axes[0])
axes[0].set_title("Qoniqqan va norozi bo'lgan mijozlarning jinsi")

sns.countplot(x='Customer Type', hue='satisfaction', palette='viridis', data=df_train_set, ax=axes[1])
axes[1].set_title("Qoniqqan va norozi bo'lgan mijozlarning mijoz turi")

sns.countplot(x='Type of Travel', hue='satisfaction', palette='viridis', data=df_train_set, ax=axes[2])
axes[2].set_title("Qoniqqan va norozi bo'lgan mijozlar parvozining maqsadi")

plt.show()

# train un
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df_train_set['Gender'] = encoder.fit_transform(df_train_set['Gender'].values)
df_train_set['Customer Type'] = encoder.fit_transform(df_train_set['Customer Type'].values)
df_train_set['Type of Travel'] = encoder.fit_transform(df_train_set['Type of Travel'].values)
df_train_set['Class'] = encoder.fit_transform(df_train_set['Class'].values)
df_train_set

df_train_set.corrwith(df_train_set['satisfaction'])

df_train1=df_train_set.drop(["id","Gender","Age","Departure/Arrival time convenient","Gate location","Departure Delay in Minutes","Arrival Delay in Minutes"],axis=1)
df_train1

df_train1.info()

corr_matrix =df_train1.corr().abs()
corr_matrix.style.background_gradient(cmap='coolwarm')

# test un
from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
df_test_set['Gender'] = encoder.fit_transform(df_test_set['Gender'].values)
df_test_set['Customer Type'] = encoder.fit_transform(df_test_set['Customer Type'].values)
df_test_set['Type of Travel'] = encoder.fit_transform(df_test_set['Type of Travel'].values)
df_test_set['Class'] = encoder.fit_transform(df_test_set['Class'].values)
df_test_set.head(3)

df_test1=df_test_set.drop(["id","Gender","Age","Departure/Arrival time convenient","Gate location","Departure Delay in Minutes","Arrival Delay in Minutes"],axis=1)
df_test1

df_test1.info()

X_train=df_train1.drop("satisfaction",axis=1).values
y_train=df_train1["satisfaction"]
X_test=df_test1
y_test=df_result['satisfaction']

LR_model = LogisticRegression()
LR_model.fit(X_train, y_train)

# Modelni baholash
y_pred = LR_model.predict(X_test)
print(metrics.classification_report(y_test, y_pred))
print("Model aniqligi:", metrics.accuracy_score(y_test,y_pred))

# confusion matrix
conf_mat = metrics.confusion_matrix(y_test, y_pred)
sns.heatmap(conf_mat, annot=True,fmt="g")
plt.show()

import numpy as np
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
# from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.metrics import precision_score
from sklearn import tree
from matplotlib import pyplot as plt
from sklearn.model_selection import cross_val_predict
import seaborn as sns
import matplotlib.pyplot as plt

tree_model = DecisionTreeClassifier()
tree_model.fit(X_train, y_train)

df_train_set.head(3)

df_test_set.head(3)

age=int(input("Yoshingizni kiriting : "))
Gender= int(input("Yoʻlovchilarning jinsini kiriting: 0- Ayol, 1- Erkak : "))
CT=int(input("Mijoz turini kiriting: 0-ishonchli , 1-ishonchsiz: "))
TOT=int(input("Yoʻlovchilar parvozining maqsadini kiriting: 0-biznes sayohat , 1-shaxsiy sayohat: "))
Class=int(input("yoʻlovchilar samolyotida sayohat klassini kiriting : 0-Business ,1-Eco 2-Eco Plus : "))
IWS=int(input("Parvoz ichidagi Wi-Fi xizmatidan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
DATC=int(input("Ketish/Kelish vaqtining qoniqish darajasi:  0: Tegishli emas; 1-5 : "))
EOOB=int(input("Online tavsiya qilishning qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
GL=int(input("Darvoza joylashuvidan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
FAD=int(input("Oziq-ovqat va ichimlikdan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
OB=int( input("Online tavsiya qilishdan qoniqish darajasi: 0: Tegishli emas; 1-5 :"))
SC=int(input("Oʻrindiqning qulayligidan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
IE=int(input("Parvoz ichidagi amaliyotdan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
OBS=int(input("Bort xizmatidan qoniqish darajasi:   0: Tegishli emas; 1-5 : "))
LRS=int(input("oyoq xonasi xizmatidan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
BH=int(input("bagajni tashishdan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
ChIS=int(input("Roʻyxatdan oʻtish xizmatidan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
IS=int(input("Parvoz ichidagi xizmatdan qoniqish darajasi: 0: Tegishli emas; 1-5 : "))
Cleanliness=int(input("Tozalikdan qoniqis3h darajasi: 0: Tegishli emas; 1-5 : "))
A=np.array([[age, Gender, CT, TOT, Class,IWS,DATC,EOOB,SC,IE,OBS,LRS,BH,ChIS,IS,Cleanliness]])
A

tree_model.predict(A)

#Modelni baholaymiz
y_predict = tree_model.predict(X_test)
print(y_predict)
print(y_test.to_numpy())

print(classification_report(y_test.to_numpy(), y_predict))

print("DecisionTrees's Accuracy: ", accuracy_score(y_test, y_predict))

y_predict

sns.heatmap(confusion_matrix(y_test, y_predict), annot=True)
plt.show()

# oddiy kurinishda
confusion_matrix(y_test, y_predict)

p=pd.cut(df_train1.satisfaction,2,labels=["norozilik","neytral"],duplicates='drop')
p

# tree modulining ichidagi plot_tree funksiyasidan foydalaniladi.
tree_model.fit(X_train, y_train)
y_predict1 = tree_model.predict(X_test)
cols = df_train1.drop('satisfaction', axis=1).values
classes = p
print("DecisionTrees's Accuracy: ", accuracy_score(y_test, y_predict1))
plt.figure(figsize=(10,8))
tree.plot_tree(tree_model,feature_names=cols,class_names=classes,filled=True )
plt.show()
print(cols)

tree_model = DecisionTreeClassifier(min_impurity_decrease=0.05)
tree_model.fit(X_train, y_train)
y_predict2 = tree_model.predict(X_test)
print("DecisionTrees's Accuracy: ", accuracy_score(y_test, y_predict2))
plt.figure(figsize=(10,8))
tree.plot_tree(tree_model, feature_names=cols, class_names=classes, filled=True)
plt.show()

tree_model = DecisionTreeClassifier( max_depth=3)
tree_model.fit(X_train, y_train)
y_predict3 = tree_model.predict(X_test)
print("DecisionTrees's Accuracy: ", accuracy_score(y_test, y_predict3))
plt.figure(figsize=(10,8))
tree.plot_tree(tree_model, feature_names=cols, class_names=classes, filled=True)
plt.show()

tree_model = DecisionTreeClassifier(min_samples_leaf=10)
tree_model.fit(X_train, y_train)
y_predict4 = tree_model.predict(X_test)
print("DecisionTrees's Accuracy: ", accuracy_score(y_test, y_predict4))
plt.figure(figsize=(10,8))
tree.plot_tree(tree_model, feature_names=cols, class_names=classes, filled=True)
plt.show()

# K-NN modelini chaqirib olamiz
from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=24) # k-ni qiymati

knn.fit(X_train, y_train)
knn

X_test

X_test
y_pridect=knn.predict(X_test)
print(y_test.to_numpy())
print(y_pridect)

from sklearn.metrics import jaccard_score

jaccard = jaccard_score(y_test, y_pridect)
print(f"Jaccard indeksi: {jaccard:.2f}")

from sklearn.metrics import confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt
sns.heatmap(confusion_matrix(y_test, y_pridect), annot=True)
plt.show()

confusion_matrix(y_test, y_pridect)

from sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score
precision=precision_score(y_test, y_pridect)
recall=recall_score(y_test, y_pridect)
f1=f1_score(y_test, y_pridect)
accuracy=accuracy_score(y_test, y_pridect)
print(f"precision: {precision}")
print(f"recall, {recall}")
print(f"f1_score, {f1}")
print(f"accuracy, {accuracy}")

from sklearn.metrics import classification_report
a=classification_report(y_test, y_pridect)
print(a)

f11=[]
for k in range(1,25):
  knn=KNeighborsClassifier(n_neighbors=k) # k-ni qiymati
  knn.fit(X_train, y_train)
  y_pridect5=knn.predict(X_test)

  f11.append(f1_score(y_test,y_pridect5))
  print(f1_score(y_test,y_pridect5))
plt.figure(figsize=(10,6))
plt.plot(range(1,25),f11,marker='o', linestyle='-', color='g')
plt.xticks(range(1,25))
plt.title('K qiymati vs. Aniqlik (Accuracy)')
plt.xlabel('K qiymati')
plt.ylabel('Aniqlik (F1-score))')
plt.grid()
plt.show()
print("KNN  aniqligi: ",accuracy_score(y_test,y_pridect5) )
#KNN  aniqligi:  0.571

# GridSearchCV degani bu Cross-Validation yordamida tekshiradi

from sklearn.model_selection import GridSearchCV
param_grid={"n_neighbors": np.arange(1,25)}
knn_gscv = GridSearchCV(knn, param_grid, cv=5)
knn_gscv.fit(X_train,y_train)

SA=knn_gscv.cv_results_["rank_test_score"]
SA

knn_gscv.best_params_

plt.figure(figsize=(10,6))
plt.plot(param_grid["n_neighbors"],SA,marker='o', linestyle='-', color='g')
plt.xlabel('K qiymati')
plt.ylabel("Xatolik reytingi")
plt.title('Grid Search yordamida k ni toping')
plt.grid()
plt.xticks(range(1,25))
plt.grid()
plt.show()

import xgboost as xgb
model = xgb.XGBClassifier(objective='binary:logistic', # Klassifikatsiya vazifasi
                          use_label_encoder=False,
                          eval_metric='logloss')

model.fit(X_train, y_train)

# Test to'plamiga bashorat qilish
y_pred1 = model.predict(X_test)
print("XGBoost  aniqligi: ",accuracy_score(y_test,y_pred1) )

# Natijani saqlash
submission = df_result.copy()
submission['target'] = y_pridect5
submission.to_csv('submission1.csv', index=False)

print("Eng yaxshi model natijasi 'submission1.csv' fayliga saqlandi.")



